[{"title":"","date":"2017-03-30T14:22:07.000Z","path":"2017/03/30/GitPro/","text":"Git-Pro自己在工作中常用的git命令行！ Git基本操作用户信息当我们要进行Git提交的时候，我们作为提交者要以什么姓名和电子邮件地址进行提交？12git config --global user.name &quot;DefaultYuan&quot;git config --global user.email johndoe@example.com 查看配置信息1git config --list 上面命令配置好的用户信息可以通过git config --list命令查看用户名、邮箱、别名、remote地址等等！真是一览无遗！当然也可以到.git目录下的查看config文件 从现有的仓库克隆到本地1git clone https://github.com/DefaultYuan/Git-Pro.git A/B 以上命令是将现有的仓库克隆到A目录下的B文件夹里面，如果后面没有添加A/B就会默认新建一个名为Git-Pro文件夹，且将仓库克隆到这个文件夹下面！ 提交代码到本地仓库当我们在本地修改了文件，比如修改了README.md文件，我们首先查看状态确定哪些文件当前处于什么状态！1git status 该命令执行完终端输出如下：123456789On branch masterYour branch is up-to-date with &apos;origin/master&apos;.Changes not staged for commit:(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)modified: README.mdno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) 当前README.md文件是有做修改的，该文件还没有添加到stage的，提示我们可以通过git add 来添加，当然我们也可以通过git checkout – 来撤销本次做到修改，建议不要轻易这么干！后续我会讲讲相关撤销操作。 现在我们加入stage1git add README.md 如果我们现在要将本地所有修改的文件进行添加，可以用该命令：1git add . 最后，我们进行提交1git commit -m &quot;fix 具体哪个功能&quot; 如果本地我们改的内容有点多，涉及到修改多个模块的代码，建议多次添加并提交！ 将本地代码提交到远程仓库继上面的提交操作之后我们先拉取一下远程仓库的更新内容1git fetch 接下来，我们就可以手动merge远程仓库的修改了1git merge 我们为了让我们的提交记录比较美观一些的话，在这里我们会用rebase去代替merge操作1git rebase 或者用pull来拉取代码1git pull fetch跟pull有啥区别呢？fetch从远程仓库抓取到本地之后不会自动merge操作，但pull会自动merge 最后我们进行push操作1git push 这样我们就可以做到远程仓库和本地仓库的同步了！ Git进阶上面讲的是一些Git基本操作。接下来讲讲一些Git进阶小技巧 提交技巧当我们要将stage里的修改分多次提交到本地仓库,也就是具体到哪个文件1git commit DefaultYuan.txt -m &quot;fix 具体功能&quot; 如果我们想查看要提交的内容与版本库中的比较，然后进行提交1git commit -v 将工作区和stage中的所有修改的文件一次性提交到本地仓库1git commit -a 这样会默认使用 vi 添加描述,我们也可以在.git/config的core中editor = vim指定编辑器当然也可以使用-m选项直接添加提交信息1git commit -a -m &quot;fix 具体功能&quot; 有时候我们需要对上一次提交信息进行修改1git commit --amend 也可以后面添加参数-m做到修改 查看状态查看工作区中所有目录下文件的变动1git status 比较工作区与暂存区的改动1git diff 添加参数--cached，比较暂存区和版本库之间的区别1git diff --cached 添加参数HEAD，比较工作区、暂存区和版本库之间的区别1git diff HEAD HEAD关键字它指的是当前分支的最新提交，相当于一个指针,后续讲到新建分支也会提到它 stash的使用有时候我们在工作区进行开发并且不想提交的时候，这时我们又想pull最新代码；或者又想切到另外一个分支上修改紧急bug的时候git stash可以暂存当前的工作区内容 可以先暂存当前的工作区的内容1git stash 等我们切到另外分支修改完了bug之后，可以切回之前分支 然后恢复之前工作区的内容继续开发1git stash pop 也可以查看stash的Git栈信息1git stash list 当我们的stash栈列表里面有很多，并且我们想要找到对应的版本号 并且将我们想要的版本号为stash@{2}的工作内容取出来1git stash apply stash@&#123;2&#125; 也可以查看版本号为stash@{2}的工作内容1git stash show stash@&#123;2&#125; 当我们的stash栈列表的工作内容都应用回来的时候 可以将栈清空1git stash clear 分支分支在Git里面是比较廉价的，我们在开发的时候可以在本地仓库创建很多条分支 新建一条名字为dev的分支1git branch dev 这种创建方式会依然停留在当前分支 开发新功能、或者修改bug，我们会创建一条分支并切到新开分支上开发1git checkout -b dev_fixHot 也可以从当前分支新建一个dev分支，指向指定commit1git branch dev f0299e2 f0299e2是随便写的，具体要以我们自己的commit 切换到指定分支1git checkout dev 分支其实也是指向某个commit的指针，HEAD也是一个指针，它指向当前工作目录下的commit因此checkout就是让HEAD指向dev分支 删除dev分支1git branch -d dev 强制删除dev分支1git branch -D dev 将本地dev分支与dev_fixHot远程分支建立追踪关系1git branch --set-upstream dev origin/dev_fixHot 添加一个dev远程分支1git push origin dev:dev 删除dev远程分支1git push origin :dev 或者1git push origin --delete dev 选择一个commit,合并到当前分支1git cherry-pick f0299e2 合并分支rebase和merge####在工作中，如果团队开发同一个项目的人数特别多的时候，每个人都在自己的分支上开发在开发过程中，为了使提交记录直观，方便在一条分支上查看提交记录，可以对分支进行衍合，一般是在做了一些小的修改之后会用它将修改commit到本地分支上之后当本地分支上有相对应的远程分支，可以直接使用1git rebase 为了方便讲解，origin/dev_homepageFix这个远程分支是随便写的分支名当这次commit要衍合到dev_homepageFix分支上时1git rebase origin/dev_homepageFix 最后就可以push跟远程仓库同步了 ####当我们到项目接近尾声的时候，需要将各自的分支都合并到dev分支上去先抓取最新仓库更新1git fetch 然后切到dev分支上1git checkout dev 再分别合并各个分支，这里以dev_homepageFix分支为例1git merge origin/dev_homepageFix 撤销操作当我们想去整理我的提交，或者是把不该这次提交的修改提交了，我们可以对修改进行撤销，或者对提交进行撤销 恢复暂存区的所有文件到工作区1git reset HEAD 恢复暂存区的指定的某个文件到工作区1git reset HEAD README.md 我们做了一些修改，然后觉得自己做错了，不想提交 可以重置暂存区、工作区，这样就能与上次提交保持一致，建议不要轻易这么做！1git reset --hard 当我们想重新整理提交的时候，比如说将上两次的提交整理到一次提交,我们可以重置到上两次的上次提交commit 可以重置到指定的commit,并重置了暂存区，但工作区是不变的1git reset 2126dce 这种情况也会引发另外一个问题，当我们本地仓库与远程仓库一致的时候，然后我们重置，就需要用到push的force来进行强推，这是我们不想操作的，后续我会讲解一下强推的小建议！ 新建一个commit，用来撤销指定commit，后者所有变化都会被前者抵消，并应用到当前分支 我们也是不要轻易这么去做！1git revert 2126dce ##起别名当我们有比较常用的命令行用的比较频繁，但是我们又觉得完整把它们敲出来费事 #####可以在 ~/.gitconfig 文件里面进行设置别名,添加alias1234567[alias]ft = fetchck = checkoutst = statusbr = branchrb = rebaselg = log 然后试一下git st就管用了！ TODO tag","tags":[]}]